import copy
from blitz_env import is_drafted, simulate_draft, visualize_draft_board, Player, GameState, AddDropSelection
from typing import List
import collections
import os
import importlib
import base64
import re

borrowed_bots = [b'ZnJvbSBibGl0el9lbnYgaW1wb3J0IGlzX2RyYWZ0ZWQsIHNpbXVsYXRlX2RyYWZ0LCB2aXN1YWxpemVfZHJhZnRfYm9hcmQsIFBsYXllciwgR2FtZVN0YXRlLCBTdGF0c0RCLCBQcm9qZWN0aW9uc0RCCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CmltcG9ydCBtYXRoCgpkZWYgZ2V0X3BvaW50c193ZWVrXzEoc3RhdHNfZGIsIHBsYXllciwgeWVhcik6CiAgICB3ZWVrbHlfZGYgPSBzdGF0c19kYi5nZXRfd2Vla2x5X2RhdGEocGxheWVyKQogICAgdHJ5OgogICAgICByZXR1cm4gd2Vla2x5X2RmWyh3ZWVrbHlfZGZbIndlZWsiXSA9PSAxKSAmICh3ZWVrbHlfZGZbInNlYXNvbiJdID09IHllYXIpXVsiZmFudGFzeV9wb2ludHNfcHByIl0uaWxvY1swXQogICAgZXhjZXB0OgogICAgICByZXR1cm4gMAoKZGVmIGdldF9wcmVzZWFzb25fcHJvamVjdGlvbnMocHJvamVjdGlvbnNfZGIsIHBsYXllciwgeWVhcik6CiAgICB0cnk6CiAgICAgICAgcmV0dXJuIHByb2plY3Rpb25zX2RiLmdldF9wcmVzZWFzb25fcHJvamVjdGlvbnMocGxheWVyLCBzZWFzb249eWVhcilbIk1JU0NfRlBUUyJdLmlsb2NbMF0KICAgIGV4Y2VwdDoKICAgICAgICByZXR1cm4gMAoKZGVmIGdldF93ZWVrXzJfcHJvamVjdGlvbnMocHJvamVjdGlvbnNfZGIsIHBsYXllciwgeWVhcik6CiAgICB0cnk6CiAgICAgICAgcmV0dXJuIHByb2plY3Rpb25zX2RiLmdldF93ZWVrbHlfcHJvamVjdGlvbnMocGxheWVyLCBzZWFzb249eWVhciwgd2Vlaz0yKVsiTUlTQ19GUFRTIl0uaWxvY1swXQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiAwCgpwbGF5ZXJfZXhwZWN0ZWRfcG9pbnRzID0gTm9uZQoKZGVmIGRyYWZ0X3BsYXllcihnYW1lX3N0YXRlOiBHYW1lU3RhdGUpIC0+IHN0cjoKICAgICIiIgogICAgU2VsZWN0cyBhIHBsYXllciB0byBkcmFmdCBiYXNlZCBvbiB0aGUgaGlnaGVzdCByYW5rLgoKICAgIEFyZ3M6CiAgICAgICAgcGxheWVycyAoTGlzdFtQbGF5ZXJdKTogQSBsaXN0IG9mIFBsYXllciBvYmplY3RzLgoKICAgIFJldHVybnM6CiAgICAgICAgc3RyOiBUaGUgaWQgb2YgdGhlIGRyYWZ0ZWQgcGxheWVyLgogICAgIiIiCiAgICAjIEZpbHRlciBvdXQgYWxyZWFkeSBkcmFmdGVkIHBsYXllcnMKICAgIHVuZHJhZnRlZF9wbGF5ZXJzID0gW3BsYXllciBmb3IgcGxheWVyIGluIGdhbWVfc3RhdGUucGxheWVycyBpZiBub3QgaXNfZHJhZnRlZChwbGF5ZXIpXQoKICAgICMgRmluZCBwbGF5ZXJzIGN1cnJlbnRseSBvbiB0ZWFtCiAgICB0ZWFtX3BsYXllcnMgPSBbcGxheWVyIGZvciBwbGF5ZXIgaW4gZ2FtZV9zdGF0ZS5wbGF5ZXJzIGlmIHBsYXllci5zdGF0dXMuY3VycmVudF9mYW50YXN5X3RlYW1faWQgPT0gZ2FtZV9zdGF0ZS5jdXJyZW50X2JvdF90ZWFtX2lkXQoKICAgIGRlZiBnZXRfZXhwZWN0ZWRfcG9pbnRzKHN0YXRzX2RiLCBwcm9qZWN0aW9uc19kYiwgcGxheWVyKToKICAgICAgICBwcmVzZWFzb25fcHJvamVjdGlvbnMgPSBnZXRfcHJlc2Vhc29uX3Byb2plY3Rpb25zKHByb2plY3Rpb25zX2RiLCBwbGF5ZXIsIGdhbWVfc3RhdGUubGVhZ3VlX3NldHRpbmdzLnllYXIpCiAgICAgICAgd2Vla18yX3Byb2plY3Rpb25zID0gZ2V0X3dlZWtfMl9wcm9qZWN0aW9ucyhwcm9qZWN0aW9uc19kYiwgcGxheWVyLCBnYW1lX3N0YXRlLmxlYWd1ZV9zZXR0aW5ncy55ZWFyKQogICAgICAgIHdlZWtfMV9wb2ludHMgPSBnZXRfcG9pbnRzX3dlZWtfMShzdGF0c19kYiwgcGxheWVyLCBnYW1lX3N0YXRlLmxlYWd1ZV9zZXR0aW5ncy55ZWFyKQogICAgICAgICMgdGFrZSB0aGUgYXZlcmFnZSBvZiBwcmVzZWFzb25fcHJvamVjdGlvbnMsIHdlZWtfMl9wcm9qZWN0aW9ucyoxNywgYW5kIHdlZWtfMV9wb2ludHMqMTcgYXMgdGhlIHByb2plY3RlZCBwb2ludHMKICAgICAgICBleHBlY3RlZF9wb2ludHMgPSAocHJlc2Vhc29uX3Byb2plY3Rpb25zICsgd2Vla18yX3Byb2plY3Rpb25zKjE3ICsgd2Vla18xX3BvaW50cyoxNykgLyAzLjAKICAgICAgICByZXR1cm4gZXhwZWN0ZWRfcG9pbnRzCgogICAgIyBUaGlzIGlzIHRoZSBleHBlbnNpdmUgQVBJIGNhbGxzLiAgSXQgbmVlZHMgdG8gYmUgZG9uZSBhdCBsZWFzdCBvbmNlLCBidXQgaW4gY2FzZSB0aGlzIGlzIHBhcnQgb2YgYSBzaW11bGF0aW9uLCBjYWNoZSB0aGUgdmFsdWVzIGZvciByZS11c2UKICAgIGdsb2JhbCBwbGF5ZXJfZXhwZWN0ZWRfcG9pbnRzCiAgICBpZiBwbGF5ZXJfZXhwZWN0ZWRfcG9pbnRzID09IE5vbmU6CiAgICAgICAgc3RhdHNfZGIgPSBTdGF0c0RCKFtnYW1lX3N0YXRlLmxlYWd1ZV9zZXR0aW5ncy55ZWFyXSkKICAgICAgICBwcm9qZWN0aW9uc19kYiA9IFByb2plY3Rpb25zREIoKQogICAgICAgIHBsYXllcl9leHBlY3RlZF9wb2ludHMgPSB7cGxheWVyLmlkOiBnZXRfZXhwZWN0ZWRfcG9pbnRzKHN0YXRzX2RiLCBwcm9qZWN0aW9uc19kYiwgcGxheWVyKSBmb3IgcGxheWVyIGluIGdhbWVfc3RhdGUucGxheWVyc30KCgogICAgZGVmIHNjb3JlX3BsYXllcihwbGF5ZXIpOgogICAgICAgIGV4cGVjdGVkX3BvaW50cyA9IHBsYXllcl9leHBlY3RlZF9wb2ludHNbcGxheWVyLmlkXQogICAgICAgICMgVXNlIGEgbXVsdGlwbGllciBiYXNlZCBvbiBjb3VudCBvZiBwb3NpdGlvbnMgdGhlIHBsYXllciBjYW4gcGxheSAtIHRoZSBwbGF5ZXJzIGF0IHRoaXMgcG9zaXRpb24gZHJhZnRlZCAqIDAuNQogICAgICAgIHBsYXllcl9wb3MgPSBwbGF5ZXIuYWxsb3dlZF9wb3NpdGlvbnNbMF0KICAgICAgICBwb3NpdGlvbl9wbGF5ZXJzX2RyYWZ0ZWQgPSBsZW4oW3AgZm9yIHAgaW4gdGVhbV9wbGF5ZXJzIGlmIHBsYXllcl9wb3MgaW4gcC5hbGxvd2VkX3Bvc2l0aW9uc10pCiAgICAgICAgcG9zaXRpb25fcGxheWVyX3Nsb3RzID0gbGVuKFtwIGZvciBwIGluIGdhbWVfc3RhdGUubGVhZ3VlX3NldHRpbmdzLnNsb3RzX3Blcl90ZWFtIGlmIHBsYXllcl9wb3MgaW4gcC5hbGxvd2VkX3BsYXllcl9wb3NpdGlvbnNdKQoKICAgICAgICBzY29yZSA9IGV4cGVjdGVkX3BvaW50cyAqIG1hdGguZXhwKHBvc2l0aW9uX3BsYXllcl9zbG90cyAtIHBvc2l0aW9uX3BsYXllcnNfZHJhZnRlZCkKICAgICAgICByYW5rID0gLTEgKiBwbGF5ZXIucmFuawogICAgICAgIHJldHVybiAoc2NvcmUsIHJhbmspCgoKICAgICMgU29ydCBiYXNlZCBvbiBwcmVjb21wdXRlZCBzY29yZXMKICAgIHVuZHJhZnRlZF9wbGF5ZXJzLnNvcnQoa2V5PWxhbWJkYSBwbGF5ZXI6IHNjb3JlX3BsYXllcihwbGF5ZXIpLCByZXZlcnNlPVRydWUpCgogICAgY3VycmVudF9yb3VuZCA9IChnYW1lX3N0YXRlLmN1cnJlbnRfZHJhZnRfcGljayAtIDEpIC8vIGxlbihnYW1lX3N0YXRlLnRlYW1zKQoKICAgICMgcHJpbnQoY3VycmVudF9yb3VuZCkKICAgICMgaW5kZXggPSAwCiAgICAjIGZvciBwbGF5ZXIgaW4gdW5kcmFmdGVkX3BsYXllcnNbMDoxMF06CiAgICAjICAgICBwcmludChpbmRleCwgcGxheWVyLmZ1bGxfbmFtZSwgcGxheWVyLmFsbG93ZWRfcG9zaXRpb25zWzBdLCBzY29yZV9wbGF5ZXIocGxheWVyKSkKICAgICMgICAgIGluZGV4ICs9IDEKICAgICMgcHJpbnQoKQogICAgIyBpZiBpdCdzIHRoZSBzZWNvbmQgdG8gbGFzdCByb3VuZCwgcGljayB0aGUgdG9wIGF2YWlsYWJsZSBraWNrZXIKICAgIHJvdW5kc19yZW1haW5pbmcgPSBnYW1lX3N0YXRlLmxlYWd1ZV9zZXR0aW5ncy50b3RhbF9yb3VuZHMgLSBjdXJyZW50X3JvdW5kCiAgICBpZiByb3VuZHNfcmVtYWluaW5nID09IDE6CiAgICAgICAgZm9yIHBsYXllciBpbiB1bmRyYWZ0ZWRfcGxheWVyczoKICAgICAgICAgICAgaWYgcGxheWVyLmFsbG93ZWRfcG9zaXRpb25zWzBdID09ICdLJzoKICAgICAgICAgICAgICAgIHJldHVybiBwbGF5ZXIuaWQKICAgIGlmIHJvdW5kc19yZW1haW5pbmcgPT0gMjoKICAgICAgICBmb3IgcGxheWVyIGluIHVuZHJhZnRlZF9wbGF5ZXJzOgogICAgICAgICAgICBpZiBwbGF5ZXIuYWxsb3dlZF9wb3NpdGlvbnNbMF0gPT0gJ0RTVCc6CiAgICAgICAgICAgICAgICByZXR1cm4gcGxheWVyLmlkCgogICAgIyBTZWxlY3QgdGhlIHBsYXllciB3aXRoIHRoZSBoaWdoZXN0IHJhbmsgKGxvd2VzdCByYW5rIG51bWJlcikKICAgIGlmIHVuZHJhZnRlZF9wbGF5ZXJzOgogICAgICAgIHJldHVybiB1bmRyYWZ0ZWRfcGxheWVyc1swXS5pZAogICAgZWxzZToKICAgICAgICByZXR1cm4gIiIgICMgUmV0dXJuIGVtcHR5IHN0cmluZyBpZiBubyB1bmRyYWZ0ZWQgcGxheWVycyBhcmUgYXZhaWxhYmxl', b'ZnJvbSBibGl0el9lbnYgaW1wb3J0IGxvYWRfcGxheWVycywgU3RhdHNEQiwgaXNfZHJhZnRlZCwgc2ltdWxhdGVfZHJhZnQsIHZpc3VhbGl6ZV9kcmFmdF9ib2FyZCwgUGxheWVyLCBHYW1lU3RhdGUKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QKaW1wb3J0IG1hdGgKaW1wb3J0IHN5cwoKUUJfUE9TID0gIlFCIgpSQl9QT1MgPSAiUkIiCldSX1BPUyA9ICJXUiIKVEVfUE9TID0gIlRFIgpLX1BPUyA9ICJLIgpEX1BPUyA9ICJEU1QiCgpkZWYgZ2V0X2RyYWZ0ZWRfdGVhbShwbGF5ZXJzLCB0ZWFtX2lkKToKICAgIHJvc3RlciA9IHsKICAgICAgICBRQl9QT1MgOiBbXSwKICAgICAgICBSQl9QT1MgOiBbXSwKICAgICAgICBXUl9QT1MgOiBbXSwKICAgICAgICBURV9QT1MgOiBbXSwKICAgICAgICBLX1BPUyA6IFtdLAogICAgICAgIERfUE9TIDogW10KICAgIH0KCiAgICBmb3IgcGxheWVyIGluIFtwbGF5ZXIgZm9yIHBsYXllciBpbiBwbGF5ZXJzIGlmIGlzX2RyYWZ0ZWQocGxheWVyKSBhbmQgcGxheWVyLnN0YXR1cy5jdXJyZW50X2ZhbnRhc3lfdGVhbV9pZCA9PSB0ZWFtX2lkXToKICAgICAgICBtYWluX3BvcyA9IHBsYXllci5hbGxvd2VkX3Bvc2l0aW9uc1swXQogICAgICAgIHJvc3RlclttYWluX3Bvc10uYXBwZW5kKHBsYXllcikKCiAgICByZXR1cm4gcm9zdGVyCgpkZWYgZ2V0X3RhcmdldF9wb3NpdGlvbnMoZHJhZnRlZF90ZWFtLCBjdXJfcm91bmQsIHRvdGFsX3JvdW5kcyk6CiAgICB0YXJnZXRfcG9zaXRpb25zID0gW10KCiAgICBpZiB0b3RhbF9yb3VuZHMgLSBjdXJfcm91bmQgPCAyOgogICAgICAgICMgTGFzdCAyIHJvdW5kcyB3ZSBnbyBmb3Iga2lja2VycyBhbmQgZGVmZW5zZQogICAgICAgIGlmIGxlbihkcmFmdGVkX3RlYW1bS19QT1NdKSA8IDE6CiAgICAgICAgICAgIHRhcmdldF9wb3NpdGlvbnMuYXBwZW5kKEtfUE9TKQoKICAgICAgICBpZiBsZW4oZHJhZnRlZF90ZWFtW0RfUE9TXSkgPCAxOgogICAgICAgICAgICB0YXJnZXRfcG9zaXRpb25zLmFwcGVuZChEX1BPUykKICAgIGVsc2U6CiAgICAgICAgcmJfY291bnQgPSBsZW4oZHJhZnRlZF90ZWFtW1JCX1BPU10pCiAgICAgICAgd3JfY291bnQgPSBsZW4oZHJhZnRlZF90ZWFtW1dSX1BPU10pCgogICAgICAgIGlmIHJiX2NvdW50IDwgNSBhbmQgKHJiX2NvdW50ICsgd3JfY291bnQpIDwgMTA6CiAgICAgICAgICAgIHRhcmdldF9wb3NpdGlvbnMuYXBwZW5kKFJCX1BPUykKCiAgICAgICAgaWYgd3JfY291bnQgPCA1IGFuZCAocmJfY291bnQgKyB3cl9jb3VudCkgPCAxMDoKICAgICAgICAgICAgdGFyZ2V0X3Bvc2l0aW9ucy5hcHBlbmQoV1JfUE9TKQoKICAgICAgICBhbGxvd2VkX3FicyA9IDIgaWYgY3VyX3JvdW5kID4gNyBlbHNlIDEgaWYgY3VyX3JvdW5kID4gMiBlbHNlIDAKICAgICAgICBpZiBjdXJfcm91bmQgPiAyIGFuZCBsZW4oZHJhZnRlZF90ZWFtW1FCX1BPU10pIDwgYWxsb3dlZF9xYnM6CiAgICAgICAgICAgIHRhcmdldF9wb3NpdGlvbnMuYXBwZW5kKFFCX1BPUykKCiAgICAgICAgaWYgY3VyX3JvdW5kID4gMyBhbmQgbGVuKGRyYWZ0ZWRfdGVhbVtURV9QT1NdKSA8IDE6CiAgICAgICAgICAgIHRhcmdldF9wb3NpdGlvbnMuYXBwZW5kKFRFX1BPUykKICAgIAogICAgcmV0dXJuIHRhcmdldF9wb3NpdGlvbnMKCmRlZiBnZXRfY3VycmVudF9yb3VuZChnYW1lX3N0YXRlOiBHYW1lU3RhdGUpIC0+IGludDoKICAgIHplcm9fYmFzZWRfcm91bmQgPSAoZ2FtZV9zdGF0ZS5jdXJyZW50X2RyYWZ0X3BpY2sgLSAxKSAvLyBsZW4oZ2FtZV9zdGF0ZS50ZWFtcykKICAgIHJldHVybiB6ZXJvX2Jhc2VkX3JvdW5kICsgMQoKZGVmIGxpc3RfdG9fbWFwKGxpc3QpOgogICAgbWFwID0ge30KICAgIGZvciBpdGVtIGluIGxpc3Q6IAogICAgICAgIG1hcFtpdGVtXSA9ICIiCiAgICAKICAgIHJldHVybiBtYXAKCmRlZiBwbGF5ZXJfbmVlZChwbGF5ZXIsIGV4aXN0aW5nX3BsYXllcnNfaW5fcG9zaXRpb24pOgogICAgb3RoZXJfcGxheWVyc19wZW5hbHR5ID0gMCBpZiBleGlzdGluZ19wbGF5ZXJzX2luX3Bvc2l0aW9uIDwgMiBlbHNlIGV4aXN0aW5nX3BsYXllcnNfaW5fcG9zaXRpb24KICAgIHBvc2l0aW9uX3JhbmtfcGVuYWx0eSA9IDIgKiAocGxheWVyLnBvc2l0aW9uX3JhbmsgLy8gNSkKICAgIHJldHVybiBwbGF5ZXIucmFuayArIG90aGVyX3BsYXllcnNfcGVuYWx0eSArIHBvc2l0aW9uX3JhbmtfcGVuYWx0eQoKZGVmIGRyYWZ0X3BsYXllcihnYW1lX3N0YXRlOiBHYW1lU3RhdGUpIC0+IHN0cjoKICAgICIiIgogICAgU2VsZWN0cyBhIHBsYXllciB0byBkcmFmdCBiYXNlZCBvbiB0aGUgaGlnaGVzdCByYW5rLgoKICAgIEFyZ3M6CiAgICAgICAgcGxheWVycyAoTGlzdFtQbGF5ZXJdKTogQSBsaXN0IG9mIFBsYXllciBvYmplY3RzLgoKICAgIFJldHVybnM6CiAgICAgICAgc3RyOiBUaGUgaWQgb2YgdGhlIGRyYWZ0ZWQgcGxheWVyLgogICAgIiIiCgogICAgcGxheWVyX2RlbnlfbWFwID0gewogICAgICAgICJNYXJ2aW4gSGFycmlzb24gSnIuIjogIiIsCiAgICAgICAgIkRyYWtlIExvbmRvbiI6ICIiLAogICAgICAgICJaYW1pciBXaGl0ZSIgOiAiIiwKICAgIH0KCiAgICAjIERvIG5vdCBkcmFmdCBUdWEgdGhpcyB5ZWFyCiAgICBpZiBnYW1lX3N0YXRlLmxlYWd1ZV9zZXR0aW5ncy55ZWFyID09IDIwMjQ6CiAgICAgICAgcGxheWVyX2RlbnlfbWFwWyJUdWEgVGFnb3ZhaWxvYSJdID0gIiIKICAgICAgICBwbGF5ZXJfZGVueV9tYXBbIlB1a2EgTmFjdWEiXSA9ICIiCgogICAgdGVhbV9kZW55X21hcCA9IHsKICAgICAgICAiQ0FSIjogIiIsCiAgICB9CgogICAgIyByZWxldmFudCBjdXJyZW50IGdhbWUgc3RhdGUKICAgIG15X3RlYW1faWQgPSBnYW1lX3N0YXRlLmN1cnJlbnRfYm90X3RlYW1faWQKICAgIGRyYWZ0ZWRfdGVhbSA9IGdldF9kcmFmdGVkX3RlYW0oZ2FtZV9zdGF0ZS5wbGF5ZXJzLCBteV90ZWFtX2lkKQogICAgY3VyX3JvdW5kID0gZ2V0X2N1cnJlbnRfcm91bmQoZ2FtZV9zdGF0ZSkKCiAgICAjIHBvc2l0aW9ucyB3ZSBhcmUgbG9va2luZyBmb3IKICAgIHRhcmdldF9wb3NpdGlvbnMgPSBnZXRfdGFyZ2V0X3Bvc2l0aW9ucyhkcmFmdGVkX3RlYW0sIGN1cl9yb3VuZCwgZ2FtZV9zdGF0ZS5sZWFndWVfc2V0dGluZ3MudG90YWxfcm91bmRzKQogICAgcG9zaXRpb25fbWFwID0gbGlzdF90b19tYXAodGFyZ2V0X3Bvc2l0aW9ucykKCiAgICAjIHBsYXllcnMgd2UgYXJlIGxvb2tpbmcgZm9yCiAgICB1bmRyYWZ0ZWRfcGxheWVycyA9IFtwbGF5ZXIgZm9yIHBsYXllciBpbiBnYW1lX3N0YXRlLnBsYXllcnMgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpc19kcmFmdGVkKHBsYXllcikKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHBsYXllci5hbGxvd2VkX3Bvc2l0aW9uc1swXSBpbiBwb3NpdGlvbl9tYXAKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHBsYXllci5mdWxsX25hbWUgbm90IGluIHBsYXllcl9kZW55X21hcAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgcGxheWVyLnByb2Zlc3Npb25hbF90ZWFtIG5vdCBpbiB0ZWFtX2RlbnlfbWFwXQoKCgogICAgIyBwcmludChwb3NpdGlvbl9tYXApCgogICAgIyBmb3Igayx2IGluIGRyYWZ0ZWRfdGVhbS5pdGVtcygpOgogICAgIyAgICAgcHJpbnQoayArICI6ICIgKyBzdHIobGVuKHYpKSkKCiAgICAjIGlmIGN1cl9yb3VuZCA9PSBnYW1lX3N0YXRlLmxlYWd1ZV9zZXR0aW5ncy50b3RhbF9yb3VuZHM6CiAgICAjICAgICBwcmludChkcmFmdGVkX3RlYW0pCgogICAgIyBTZWxlY3QgdGhlIHBsYXllciB3aXRoIHRoZSBoaWdoZXN0IHJhbmsgKGxvd2VzdCByYW5rIG51bWJlcikKICAgIHNlbGVjdGVkX3BsYXllciA9ICIiCiAgICBjdXJfbWluID0gc3lzLm1heHNpemUKICAgIGZvciBwbGF5ZXIgaW4gdW5kcmFmdGVkX3BsYXllcnM6CiAgICAgICAgc2NvcmUgPSBwbGF5ZXJfbmVlZChwbGF5ZXIsIGxlbihkcmFmdGVkX3RlYW1bcGxheWVyLmFsbG93ZWRfcG9zaXRpb25zWzBdXSkpCiAgICAgICAgaWYgc2NvcmUgPCBjdXJfbWluOgogICAgICAgICAgICBjdXJfbWluID0gc2NvcmUKICAgICAgICAgICAgc2VsZWN0ZWRfcGxheWVyID0gcGxheWVyLmlkCgogICAgcHJpbnQoIlNlbGVjdGluZzogIiArIHNlbGVjdGVkX3BsYXllcikKICAgIHByaW50KCJTY29yZTogIiArIHN0cihjdXJfbWluKSkKCiAgICBpZiBjdXJfcm91bmQgPT0gZ2FtZV9zdGF0ZS5sZWFndWVfc2V0dGluZ3MudG90YWxfcm91bmRzOgogICAgICAgIHByaW50KGRyYWZ0ZWRfdGVhbSkKICAgIAogICAgcmV0dXJuIHNlbGVjdGVkX3BsYXllciAgIyBSZXR1cm4gZW1wdHkgc3RyaW5nIGlmIG5vIHVuZHJhZnRlZCBwbGF5ZXJzIGFyZSBhdmFpbGFibGU=', b'ZnJvbSBibGl0el9lbnYgaW1wb3J0IGlzX2RyYWZ0ZWQsIHNpbXVsYXRlX2RyYWZ0LCB2aXN1YWxpemVfZHJhZnRfYm9hcmQsIFBsYXllciwgR2FtZVN0YXRlCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CgpkZWYgZ2V0X2N1cnJlbnRfcm91bmQoZ2FtZV9zdGF0ZTogR2FtZVN0YXRlKSAtPiBpbnQ6CiAgICB6ZXJvX2Jhc2VkX3JvdW5kID0gKGdhbWVfc3RhdGUuY3VycmVudF9kcmFmdF9waWNrIC0gMSkgLy8gbGVuKGdhbWVfc3RhdGUudGVhbXMpCiAgICByZXR1cm4gemVyb19iYXNlZF9yb3VuZCArIDEKCmRlZiBkcmFmdF9wbGF5ZXIoZ2FtZV9zdGF0ZTogR2FtZVN0YXRlKSAtPiBzdHI6CiAgICAiIiIKICAgIFNlbGVjdHMgYSBwbGF5ZXIgdG8gZHJhZnQgYmFzZWQgb24gdGhlIGhpZ2hlc3QgcmFuay4KCiAgICBBcmdzOgogICAgICAgIHBsYXllcnMgKExpc3RbUGxheWVyXSk6IEEgbGlzdCBvZiBQbGF5ZXIgb2JqZWN0cy4KCiAgICBSZXR1cm5zOgogICAgICAgIHN0cjogVGhlIGlkIG9mIHRoZSBkcmFmdGVkIHBsYXllci4KICAgICIiIgogICAgIyBGaWx0ZXIgb3V0IGFscmVhZHkgZHJhZnRlZCBwbGF5ZXJzCiAgICB1bmRyYWZ0ZWRfcGxheWVycyA9IFtwbGF5ZXIgZm9yIHBsYXllciBpbiBnYW1lX3N0YXRlLnBsYXllcnMgaWYgbm90IGlzX2RyYWZ0ZWQocGxheWVyKV0KCiAgICBjdXJfcm91bmQgPSBnZXRfY3VycmVudF9yb3VuZChnYW1lX3N0YXRlKQoKICAgICMgLSBkbyBub3QgZHJhZnQgZnJvbSBhbnkgb2YgdGhlc2UgdGVhbXM6IENsZXZlbGFuZCwgTmV3IFlvcmsgR2lhbnRzLCBDYXJvbGluYSwgTGFzIFZlZ2FzCiAgICB0ZWFtX2Jsb2NrX21hcCA9IHsgCiAgICAgICAgIk1JTiI6ICIiLAogICAgICAgICJHQiI6ICIiLAogICAgICAgICJDSEkiOiAiIiwKICAgICAgICAiU0YiOiAiIiwKICAgICAgICAiQ0xFIjogIiIsCiAgICAgICAgIk5ZRyI6ICIiLAogICAgICAgICJDQVIiOiAiIiwKICAgICAgICAiTFYiOiAiIgogICAgfQogICAgdW5kcmFmdGVkX3BsYXllcnMgPSBbcGxheWVyIGZvciBwbGF5ZXIgaW4gdW5kcmFmdGVkX3BsYXllcnMgaWYgcGxheWVyLnByb2Zlc3Npb25hbF90ZWFtIG5vdCBpbiB0ZWFtX2Jsb2NrX21hcF0KCiAgICAjIGRvbuKAmXQgcGljayBhIFFCIHVudGlsIGFmdGVyIHJvdW5kIDcgCiAgICBpZiBjdXJfcm91bmQgPD0gNzoKICAgICAgICB1bmRyYWZ0ZWRfcGxheWVycyA9IFtwbGF5ZXIgZm9yIHBsYXllciBpbiB1bmRyYWZ0ZWRfcGxheWVycyBpZiBwbGF5ZXIuYWxsb3dlZF9wb3NpdGlvbnNbMF0gIT0gJ1FCJ10KCiAgICBpZiBjdXJfcm91bmQgPD0gMTA6CiAgICAgICAgdW5kcmFmdGVkX3BsYXllcnMgPSBbcGxheWVyIGZvciBwbGF5ZXIgaW4gdW5kcmFmdGVkX3BsYXllcnMgaWYgcGxheWVyLmFsbG93ZWRfcG9zaXRpb25zWzBdICE9ICdURSddCgogICAgcmVtYWluaW5nX3BsYXllcnMgPSBzb3J0ZWQodW5kcmFmdGVkX3BsYXllcnMsIGtleT1sYW1iZGEgcDogcC5yYW5rKQoKICAgICMgLSBpZiBhIERldHJvaXQgTGlvbiBpcyBwcm9qZWN0ZWQgaW4gdGhlIG5leHQgMjAgcGlja3MsIHBpY2sgaGltLgogICAgZm9yIGkgaW4gcmFuZ2UoMjApOgogICAgICAgIGlmIHJlbWFpbmluZ19wbGF5ZXJzW2ldLnByb2Zlc3Npb25hbF90ZWFtID09ICJERVQiOgogICAgICAgICAgICByZXR1cm4gcmVtYWluaW5nX3BsYXllcnNbaV0uaWQKICAgIAogICAgIyBPdGhlcndpc2UgcGljayB0aGUgbmV4dCBoaWdoZXN0IHBsYXllcgogICAgcmV0dXJuIHJlbWFpbmluZ19wbGF5ZXJzWzBdLmlk', b'ZnJvbSBibGl0el9lbnYgaW1wb3J0IGlzX2RyYWZ0ZWQsIFBsYXllciwgR2FtZVN0YXRlLCBsb2FkX3BsYXllcnMKCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CgpkZWYgdGVhbV90b3RhbHModGVhbTogTGlzdFtQbGF5ZXJdKSAtPiBkaWN0OgogICAgdG90YWxzID0gZGljdCgpCiAgICBmb3IgcGxheWVyIGluIHRlYW06CiAgICAgICAgbWFpbl9wb3NpdGlvbiA9IHBsYXllci5hbGxvd2VkX3Bvc2l0aW9uc1swXQogICAgICAgIGlmIG1haW5fcG9zaXRpb24gbm90IGluIHRvdGFsczoKICAgICAgICAgICAgdG90YWxzW21haW5fcG9zaXRpb25dID0gMAoKICAgICAgICB0b3RhbHNbbWFpbl9wb3NpdGlvbl0gKz0gMQoKICAgIHJldHVybiB0b3RhbHMKCmRlZiBzaG91bGRfc2tpcCh0b3RhbHM6IGRpY3QsIHBsYXllcjogUGxheWVyKSAtPiBib29sOgogICAgbWFpbl9wb3NpdGlvbiA9IHBsYXllci5hbGxvd2VkX3Bvc2l0aW9uc1swXQogICAgaWYgbWFpbl9wb3NpdGlvbiA9PSAiUUIiOgogICAgICAgIHJldHVybiBtYWluX3Bvc2l0aW9uIGluIHRvdGFscyBhbmQgdG90YWxzW21haW5fcG9zaXRpb25dID49IDEKICAgIGVsaWYgbWFpbl9wb3NpdGlvbiA9PSAiUkIiOgogICAgICAgIHJldHVybiBtYWluX3Bvc2l0aW9uIGluIHRvdGFscyBhbmQgdG90YWxzW21haW5fcG9zaXRpb25dID49IDcKICAgIGVsaWYgbWFpbl9wb3NpdGlvbiA9PSAiV1IiOgogICAgICAgIHJldHVybiBtYWluX3Bvc2l0aW9uIGluIHRvdGFscyBhbmQgdG90YWxzW21haW5fcG9zaXRpb25dID49IDQKICAgIGVsaWYgbWFpbl9wb3NpdGlvbiA9PSAiVEUiOgogICAgICAgIHJldHVybiBtYWluX3Bvc2l0aW9uIGluIHRvdGFscyBhbmQgdG90YWxzW21haW5fcG9zaXRpb25dID49IDEKICAgIGVsaWYgbWFpbl9wb3NpdGlvbiA9PSAiSyI6CiAgICAgICAgcmV0dXJuIG1haW5fcG9zaXRpb24gaW4gdG90YWxzIGFuZCB0b3RhbHNbbWFpbl9wb3NpdGlvbl0gPj0gMQogICAgZWxpZiBtYWluX3Bvc2l0aW9uID09ICJEU1QiOgogICAgICAgIHJldHVybiBtYWluX3Bvc2l0aW9uIGluIHRvdGFscyBhbmQgdG90YWxzW21haW5fcG9zaXRpb25dID49IDEKCmRlZiBqb25zX3JhbmsocGxheWVyOiBQbGF5ZXIpOgogICAgaWYgcGxheWVyLmlkID09ICIxNjM5MyI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rICsgMjQKICAgIGlmIHBsYXllci5pZCA9PSAiMTU4MDIiOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayArIDEyCiAgICBpZiBwbGF5ZXIuaWQgPT0gIjIzMTgwIjoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgKyAyNAogICAgaWYgcGxheWVyLmlkID09ICIyMzA2NCI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rICsgMjQKICAgIGlmIHBsYXllci5pZCA9PSAiMTcyNDAiOgogICAgICAgIHJldHVybiA1CiAgICBpZiBwbGF5ZXIuaWQgPT0gIjEyMTIzIjoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgKyAxMgogICAgaWYgcGxheWVyLmlkID09ICIyMzE2MyI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rICsgMTIKICAgIGlmIHBsYXllci5pZCA9PSAiMjAxMTEiOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayArIDEyCiAgICBpZiBwbGF5ZXIuaWQgPT0gIjE5NzkwIjoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgKyAyNAogICAgaWYgcGxheWVyLmlkID09ICIxNjQzMyI6CiAgICAgICAgcmV0dXJuIDUKICAgIGlmIHBsYXllci5pZCA9PSAiMjAxMzAiOgogICAgICAgIHJldHVybiAxMgogICAgaWYgcGxheWVyLmlkID09ICIyMjk3OCI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rICsgMTIKICAgIGlmIHBsYXllci5pZCA9PSAiMTkyNTIiOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayArIDEyCiAgICBpZiBwbGF5ZXIuaWQgPT0gIjExNTk0IjoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgKyAxMgogICAgaWYgcGxheWVyLmlkID09ICIyNDMzMyI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gMwogICAgaWYgcGxheWVyLmlkID09ICIxODI0NCI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gNgogICAgaWYgcGxheWVyLmlkID09ICIxOTIyMiI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rICsgNgogICAgaWYgcGxheWVyLmlkID09ICIyMzEzNiI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gMTIKICAgIGlmIHBsYXllci5pZCA9PSAiMjM4OTEiOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayAtIDYKICAgIGlmIHBsYXllci5pZCA9PSAiMTY0MjEiOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayAtIDI0CiAgICBpZiBwbGF5ZXIuaWQgPT0gIjEzODk0IjoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgKyAxMgogICAgaWYgcGxheWVyLmlkID09ICIxMzk4MSI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gNgogICAgaWYgcGxheWVyLmlkID09ICIxODI2OSI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gNgogICAgaWYgcGxheWVyLmlkID09ICIyMjk1OCI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gMjQKICAgIGlmIHBsYXllci5pZCA9PSAiMjMxMTMiOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayAtIDEyCiAgICBpZiBwbGF5ZXIuaWQgPT0gIjE5MjExIjoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgKyAzMAogICAgaWYgcGxheWVyLmlkID09ICIyMzAyMSI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gMTIKICAgIGlmIHBsYXllci5pZCA9PSAiMTcyNjkiOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayArIDI0CiAgICBpZiBwbGF5ZXIuaWQgPT0gIjE3MjY4IjoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgKyAxMgogICAgaWYgcGxheWVyLmlkID09ICIxNjQwNiI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gMTIKICAgIGlmIHBsYXllci5pZCA9PSAiMTY0NDciOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayAtIDEyCiAgICBpZiBwbGF5ZXIuaWQgPT0gIjIyNzI2IjoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgLSAxMwogICAgaWYgcGxheWVyLmlkID09ICIxODIzOSI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gMTQKICAgIGlmIHBsYXllci5pZCA9PSAiMjI5MDIiOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayAtIDYKICAgIGlmIHBsYXllci5pZCA9PSAiMjI3MzkiOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayArIDEyCiAgICBpZiBwbGF5ZXIuaWQgPT0gIjIwMDk1IjoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgKyAyNAogICAgaWYgcGxheWVyLmlkID09ICIyMDE2NCI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gNgogICAgaWYgcGxheWVyLmlkID09ICIyMzAyMCI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gMjAKICAgIGlmIHBsYXllci5pZCA9PSAiMjMwNzAiOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayArIDEyCiAgICBpZiBwbGF5ZXIuaWQgPT0gIjE4NzA1IjoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgLSAxMgogICAgaWYgcGxheWVyLmlkID09ICIyMzAwMCI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gMTgKICAgIGlmIHBsYXllci5pZCA9PSAiMjMwMTkiOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayAtIDM1CiAgICBpZiBwbGF5ZXIuaWQgPT0gIjE2Mzk5IjoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgKyAzMAogICAgaWYgcGxheWVyLmlkID09ICIxNzIzNyI6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rIC0gMjQKICAgIGlmIHBsYXllci5pZCA9PSAiMTkyNDUiOgogICAgICAgIHJldHVybiA4NAogICAgaWYgcGxheWVyLmlkID09ICIyNTk4NyI6CiAgICAgICAgcmV0dXJuIDEzMAogICAgaWYgcGxheWVyLmlkID09ICIyMjk2OSI6CiAgICAgICAgcmV0dXJuIDQ4CiAgICBlbHNlOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuawoKZGVmIHBvc2l0aW9uYWxfd2VpZ2h0aW5nKHBsYXllcjogUGxheWVyKToKICAgIGlmICJLIiBpbiBwbGF5ZXIuYWxsb3dlZF9wb3NpdGlvbnM6CiAgICAgICAgcmV0dXJuIHBsYXllci5yYW5rICogMgogICAgaWYgIkRFRiIgaW4gcGxheWVyLmFsbG93ZWRfcG9zaXRpb25zOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayAqIDIKICAgIGlmICJSQiIgaW4gcGxheWVyLmFsbG93ZWRfcG9zaXRpb25zOgogICAgICAgIHJldHVybiBwbGF5ZXIucmFuayAqIC45CiAgICBpZiAiV1IiIGluIHBsYXllci5hbGxvd2VkX3Bvc2l0aW9uczoKICAgICAgICByZXR1cm4gcGxheWVyLnJhbmsgKiAxCgogICAgcmV0dXJuIHBsYXllci5yYW5rCgpkZWYgZ2V0X2FsbF91bmRyYWZ0ZWRfcGxheWVycyhnczogR2FtZVN0YXRlKToKICAgIHVuZHJhZnRlZF9wbGF5ZXJzID0gW10KICAgIGZvciBwbGF5ZXIgaW4gZ3MucGxheWVyczoKICAgICAgICBpZiBpc19kcmFmdGVkKHBsYXllcikgaXMgbm90IFRydWU6CiAgICAgICAgICAgIHVuZHJhZnRlZF9wbGF5ZXJzLmFwcGVuZChwbGF5ZXIpCgogICAgcmV0dXJuIHVuZHJhZnRlZF9wbGF5ZXJzCgpkZWYgZGV0ZXJtaW5lX3BsYXllcih0ZWFtOiBMaXN0W1BsYXllcl0sIHBsYXllcnM6IExpc3RbUGxheWVyXSk6CiAgICB0b3BfcmFua2VkX3BsYXllciA9IE5vbmUKICAgIHRvcF9yYW5rZWRfcGxheWVyX3NldF9yYW5rID0gMTAwMDAwMDAKICAgIHRvdGFscyA9IHRlYW1fdG90YWxzKHRlYW0pCiAgICBmb3IgcGxheWVyIGluIHBsYXllcnM6CiAgICAgICAgaWYgc2hvdWxkX3NraXAodG90YWxzLCBwbGF5ZXIpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdHJ1ZV9yYW5rID0gcG9zaXRpb25hbF93ZWlnaHRpbmcocGxheWVyKQoKICAgICAgICAgICAgaWYgdHJ1ZV9yYW5rIDwgdG9wX3JhbmtlZF9wbGF5ZXJfc2V0X3Jhbms6CiAgICAgICAgICAgICAgICB0b3BfcmFua2VkX3BsYXllciA9IHBsYXllcgogICAgICAgICAgICAgICAgdG9wX3JhbmtlZF9wbGF5ZXJfc2V0X3JhbmsgPSB0cnVlX3JhbmsKCiAgICByZXR1cm4gdG9wX3JhbmtlZF9wbGF5ZXIKCgpkZWYgZ2V0X2RyYWZ0ZWRfdGVhbShnYW1lX3N0YXRlOiBHYW1lU3RhdGUsIHRlYW1faWQ6IHN0cik6CiAgICBwbGF5ZXJzID0gZ2FtZV9zdGF0ZS5wbGF5ZXJzCiAgICByb3N0ZXIgPSBbXQogICAgZm9yIHBsYXllciBpbiBwbGF5ZXJzOgogICAgICAgIGlmIGlzX2RyYWZ0ZWQocGxheWVyKSBhbmQgcGxheWVyLnN0YXR1cy5jdXJyZW50X2ZhbnRhc3lfdGVhbV9pZCA9PSB0ZWFtX2lkOgogICAgICAgICAgICByb3N0ZXIuYXBwZW5kKHBsYXllcikKCiAgICByZXR1cm4gcm9zdGVyCgpkZWYgZHJhZnRfcGxheWVyKGdhbWVfc3RhdGU6IEdhbWVTdGF0ZSkgLT4gc3RyOgogICAgIyBSZS1yYW5rIHBsYXllcnMKICAgIGZvciBwbGF5ZXIgaW4gZ2FtZV9zdGF0ZS5wbGF5ZXJzOgogICAgICAgIHBsYXllci5yYW5rID0gam9uc19yYW5rKHBsYXllcikKCiAgICBteV90ZWFtX2lkID0gZ2FtZV9zdGF0ZS5jdXJyZW50X2JvdF90ZWFtX2lkCiAgICBteV90ZWFtID0gZ2V0X2RyYWZ0ZWRfdGVhbShnYW1lX3N0YXRlPWdhbWVfc3RhdGUsIHRlYW1faWQ9bXlfdGVhbV9pZCkKICAgIHBsYXllcl90b19kcmFmdCA9IGRldGVybWluZV9wbGF5ZXIobXlfdGVhbSwgZ2V0X2FsbF91bmRyYWZ0ZWRfcGxheWVycyhnYW1lX3N0YXRlKSkKICAgIHJldHVybiBwbGF5ZXJfdG9fZHJhZnQuaWQ=', b'', b'ZnJvbSBibGl0el9lbnYgaW1wb3J0IGlzX2RyYWZ0ZWQsIHNpbXVsYXRlX2RyYWZ0LCB2aXN1YWxpemVfZHJhZnRfYm9hcmQsIFBsYXllciwgR2FtZVN0YXRlCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CgpkZWYgZHJhZnRfcGxheWVyKGdhbWVfc3RhdGU6IEdhbWVTdGF0ZSkgLT4gc3RyOgogICAgIiIiCiAgICBTZWxlY3RzIGEgcGxheWVyIHRvIGRyYWZ0IGJhc2VkIG9uIHRoZSBoaWdoZXN0IHJhbmsuCgogICAgQXJnczoKICAgICAgICBwbGF5ZXJzIChMaXN0W1BsYXllcl0pOiBBIGxpc3Qgb2YgUGxheWVyIG9iamVjdHMuCgogICAgUmV0dXJuczoKICAgICAgICBzdHI6IFRoZSBpZCBvZiB0aGUgZHJhZnRlZCBwbGF5ZXIuCiAgICAiIiIKICAgICMgRmlsdGVyIG91dCBhbHJlYWR5IGRyYWZ0ZWQgcGxheWVycwogICAgdW5kcmFmdGVkX3BsYXllcnMgPSBbcGxheWVyIGZvciBwbGF5ZXIgaW4gZ2FtZV9zdGF0ZS5wbGF5ZXJzIGlmIG5vdCBpc19kcmFmdGVkKHBsYXllcildCgogICAgIyBTZWxlY3QgdGhlIHBsYXllciB3aXRoIHRoZSBoaWdoZXN0IHJhbmsgKGxvd2VzdCByYW5rIG51bWJlcikKICAgIGlmIHVuZHJhZnRlZF9wbGF5ZXJzOgogICAgICAgIGRyYWZ0ZWRfcGxheWVyID0gbWluKHVuZHJhZnRlZF9wbGF5ZXJzLCBrZXk9bGFtYmRhIHA6IHAucmFuaykKICAgICAgICByZXR1cm4gZHJhZnRlZF9wbGF5ZXIuaWQKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuICJOb25lIiAgIyBSZXR1cm4gZW1wdHkgc3RyaW5nIGlmIG5vIHVuZHJhZnRlZCBwbGF5ZXJzIGFyZSBhdmFpbGFibGU=', b'ZnJvbSBibGl0el9lbnYgaW1wb3J0IGlzX2RyYWZ0ZWQsIHNpbXVsYXRlX2RyYWZ0LCB2aXN1YWxpemVfZHJhZnRfYm9hcmQsIFBsYXllciwgR2FtZVN0YXRlCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CgpkZWYgZHJhZnRfcGxheWVyKGdhbWVfc3RhdGU6IEdhbWVTdGF0ZSkgLT4gc3RyOgogICAgIiIiCiAgICBTZWxlY3RzIGEgcGxheWVyIHRvIGRyYWZ0IGJhc2VkIG9uIHRoZSBoaWdoZXN0IHJhbmssIGVuc3VyaW5nIG9ubHkgb25lIFFCIGlzIGRyYWZ0ZWQuCgogICAgQXJnczoKICAgICAgICBnYW1lX3N0YXRlIChHYW1lU3RhdGUpOiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZ2FtZSBjb250YWluaW5nIGFsbCBwbGF5ZXJzLgoKICAgIFJldHVybnM6CiAgICAgICAgc3RyOiBUaGUgaWQgb2YgdGhlIGRyYWZ0ZWQgcGxheWVyLgogICAgIiIiCgogICAgIyBteSB0ZWFtCiAgICBkcmFmdF9pZCA9IGdhbWVfc3RhdGUuY3VycmVudF9ib3RfdGVhbV9pZAogICAgbXlfdGVhbSA9IFtwbGF5ZXIgZm9yIHBsYXllciBpbiBnYW1lX3N0YXRlLnBsYXllcnMgaWYgcGxheWVyLnN0YXR1cy5jdXJyZW50X2ZhbnRhc3lfdGVhbV9pZCA9PSBkcmFmdF9pZF0KCiAgICAjIGRlY2xhcmUgdmFyaWFibGVzCiAgICBkcmFmdGVkX3FiX2NvdW50ID0gMAogICAgZHJhZnRlZF9yYl9jb3VudCA9IDAKICAgIGRyYWZ0ZWRfd3JfY291bnQgPSAwCiAgICBkcmFmdGVkX2tfY291bnQgPSAwCiAgICBkcmFmdGVkX3RlX2NvdW50ID0gMAogICAgZHJhZnRlZF9wbGF5ZXJfY291bnQgPSAwCiAgICByYndyX2RpZmYgPSAwCgoKICAgICMgY2hlY2sgdGVhbSBmb3Igc3BlY2lmaWMgcG9zaXRpb25zIGFuZCBjcmVhdGUgYSBjb3VudAogICAgZm9yIHBsYXllciBpbiBteV90ZWFtOgogICAgICBkcmFmdGVkX3JiX2NvdW50ICs9IDEgaWYgIlJCIiBpbiBwbGF5ZXIuYWxsb3dlZF9wb3NpdGlvbnMgZWxzZSAwCiAgICAgIGRyYWZ0ZWRfd3JfY291bnQgKz0gMSBpZiAiV1IiIGluIHBsYXllci5hbGxvd2VkX3Bvc2l0aW9ucyBlbHNlIDAKICAgICAgZHJhZnRlZF90ZV9jb3VudCArPSAxIGlmICJURSIgaW4gcGxheWVyLmFsbG93ZWRfcG9zaXRpb25zIGVsc2UgMAogICAgICBkcmFmdGVkX3FiX2NvdW50ICs9IDEgaWYgIlFCIiBpbiBwbGF5ZXIuYWxsb3dlZF9wb3NpdGlvbnMgZWxzZSAwCiAgICAgIGRyYWZ0ZWRfa19jb3VudCArPSAxIGlmICJLIiBpbiBwbGF5ZXIuYWxsb3dlZF9wb3NpdGlvbnMgZWxzZSAwCiAgICAgIGRyYWZ0ZWRfcGxheWVyX2NvdW50ICs9IDEKCiAgICAjIGFsbCBwbGF5ZXJzIGV4Y2VwdCBmb3IgcGFudGhlcnMgYW5kIHR1YSBhbmQgZGVmZW5zZQogICAgdW5kcmFmdGVkX3BsYXllcnMgPSBbcGxheWVyIGZvciBwbGF5ZXIgaW4gZ2FtZV9zdGF0ZS5wbGF5ZXJzIGlmIG5vdCBpc19kcmFmdGVkKHBsYXllcikgYW5kIHBsYXllci5wcm9mZXNzaW9uYWxfdGVhbSAhPSAnQ0FSJ10KICAgICMgcmIgYW5kIHdyIGxpc3QKICAgIHVuZHJhZnRlZF9yYnN3cnMgPSBbcGxheWVyIGZvciBwbGF5ZXIgaW4gdW5kcmFmdGVkX3BsYXllcnMgaWYgIHBsYXllci5hbGxvd2VkX3Bvc2l0aW9uc1swXSA9PSAnUkInIG9yIHBsYXllci5hbGxvd2VkX3Bvc2l0aW9uc1swXSA9PSAnV1InXQogICAgIyBxYiBsaXN0CiAgICB1bmRyYWZ0ZWRfcWJzID0gW3BsYXllciBmb3IgcGxheWVyIGluIHVuZHJhZnRlZF9wbGF5ZXJzIGlmIHBsYXllci5hbGxvd2VkX3Bvc2l0aW9uc1swXSA9PSAnUUInXQogICAgIyByYiBsaXN0CiAgICB1bmRyYWZ0ZWRfcmJzID0gW3BsYXllciBmb3IgcGxheWVyIGluIHVuZHJhZnRlZF9wbGF5ZXJzIGlmIHBsYXllci5hbGxvd2VkX3Bvc2l0aW9uc1swXSA9PSAnUkInXQogICAgIyB3ciBsaXN0CiAgICB1bmRyYWZ0ZWRfd3JzID0gW3BsYXllciBmb3IgcGxheWVyIGluIHVuZHJhZnRlZF9wbGF5ZXJzIGlmIHBsYXllci5hbGxvd2VkX3Bvc2l0aW9uc1swXSA9PSAnV1InXQogICAgIyB0ZSBsaXN0CiAgICB1bmRyYWZ0ZWRfdGVzID0gW3BsYXllciBmb3IgcGxheWVyIGluIHVuZHJhZnRlZF9wbGF5ZXJzIGlmIHBsYXllci5hbGxvd2VkX3Bvc2l0aW9uc1swXSA9PSAnVEUnXQogICAgIyBrIGxpc3QKICAgIHVuZHJhZnRlZF9rcyA9IFtwbGF5ZXIgZm9yIHBsYXllciBpbiB1bmRyYWZ0ZWRfcGxheWVycyBpZiBwbGF5ZXIuYWxsb3dlZF9wb3NpdGlvbnNbMF0gPT0gJ0snXQogICAgIyBkc3QgbGlzdAogICAgdW5kcmFmdGVkX2RzdHMgPSBbcGxheWVyIGZvciBwbGF5ZXIgaW4gdW5kcmFmdGVkX3BsYXllcnMgaWYgcGxheWVyLmFsbG93ZWRfcG9zaXRpb25zWzBdID09ICdEU1QnXQoKICAgICMgdmFyaWFibGUgcmJ3cl9kaWZmIGNhbGN1bGF0aW5nIHRoZSBhYnNvbHV0ZSB2YWx1ZSBkaWZmIGJldHdlZW4gcmIgYW5kIHdyCiAgICByYndyX2RpZmYgPSBhYnMoZHJhZnRlZF9yYl9jb3VudCAtIGRyYWZ0ZWRfd3JfY291bnQpCiAgCiAgICBpZiByYndyX2RpZmYgPCAyOgogICAgICAjIHByaW9yaXRpemVzIHJicyBvbmNlIGFsbCBwb3NpdGlvbnMgaGF2ZSBiZWVuIGRyYWZ0ZWQsIGFuZCBlbGltaW5hdGVzIHRoZSBwaWNrcyBmcm9tIHJvdW5kIDEzLTE1CiAgICAgIGlmIGRyYWZ0ZWRfcmJfY291bnQgPiAxIGFuZCBkcmFmdGVkX3JiX2NvdW50IDwgNCBhbmQgZHJhZnRlZF93cl9jb3VudCA+IDEgYW5kIGRyYWZ0ZWRfdGVfY291bnQgPiAwIGFuZCBkcmFmdGVkX3FiX2NvdW50ID4gMCBhbmQgZHJhZnRlZF9wbGF5ZXJfY291bnQgIT0gMTMgYW5kIGRyYWZ0ZWRfcGxheWVyX2NvdW50ICE9IDE0IGFuZCBkcmFmdGVkX3BsYXllcl9jb3VudCAhPSAxMjoKICAgICAgICAgIGRyYWZ0ZWRfcGxheWVyID0gbWluKHVuZHJhZnRlZF9yYnMsIGtleT1sYW1iZGEgcDogcC5yYW5rKQogICAgICAjIHNlbGVjdHMgMXN0IGFuZCAybmQgcm91bmQgcGljayBmcm9tIGhpZ2ggYWRwIHJhbmsKICAgICAgZWxpZiBkcmFmdGVkX3BsYXllcl9jb3VudCA8IDI6CiAgICAgICAgICBkcmFmdGVkX3BsYXllciA9IG1pbih1bmRyYWZ0ZWRfcmJzd3JzLCBrZXk9bGFtYmRhIHA6IHAucmFuaykKICAgICAgIyBkcmFmdHMgYSB0aWdodCBlbmQgb24gZWl0aGVyIHJvdW5kIDMgaWYgcmIgYW5kIHdyIGdldCBwaWNrZWQgMSBhbmQgMiwgb3Igcm91bmQgNCBpZiAxIGFuZCAyIGFyZSB0aGUgc2FtZQogICAgICBlbGlmIGRyYWZ0ZWRfdGVfY291bnQgPT0gMDoKICAgICAgICAgIGRyYWZ0ZWRfcGxheWVyID0gbWluKHVuZHJhZnRlZF90ZXMsIGtleT1sYW1iZGEgcDogcC5yYW5rKQogICAgICAjIGRyYWZ0cyBhIHFiIHJvdW5kIDQgb3IgNSBhZnRlciBhIHRpZ2h0IGVuZAogICAgICBlbGlmIGRyYWZ0ZWRfcWJfY291bnQgPT0gMCBhbmQgZHJhZnRlZF9wbGF5ZXJfY291bnQgPT0gNiBvciBkcmFmdGVkX3BsYXllcl9jb3VudCA9PSAxMjoKICAgICAgICAgIGRyYWZ0ZWRfcGxheWVyID0gbWluKHVuZHJhZnRlZF9xYnMsIGtleT1sYW1iZGEgcDogcC5yYW5rKQogICAgICAjIGRyYWZ0cyBhIGtpY2tlciByb3VuZCAxNAogICAgICBlbGlmIGRyYWZ0ZWRfcGxheWVyX2NvdW50ID09IDEzOgogICAgICAgICAgZHJhZnRlZF9wbGF5ZXIgPSBtaW4odW5kcmFmdGVkX2tzLCBrZXk9bGFtYmRhIHA6IHAucmFuaykKICAgICAgIyBkcmFmdHMgYSBEU1Qgcm91bmQgMTUKICAgICAgZWxpZiBkcmFmdGVkX3BsYXllcl9jb3VudCA9PSAxNDoKICAgICAgICAgIGRyYWZ0ZWRfcGxheWVyID0gbWluKHVuZHJhZnRlZF9kc3RzLCBrZXk9bGFtYmRhIHA6IHAucmFuaykKICAgICAgIyBpZiBhbGwgZWxzZSBmYWlscywgZHJhZnQgYW4gcmIgb3Igd3IKICAgICAgZWxzZToKICAgICAgICAgIGRyYWZ0ZWRfcGxheWVyID0gbWluKHVuZHJhZnRlZF9yYnN3cnMsIGtleT1sYW1iZGEgcDogcC5yYW5rKQogICAgIyBpZiByYiBhbmQgd3IgYXJlIHVuYmFsYW5jZWQgaW4gZmF2b3Igb2YgcmJzLCBkcmFmdCBhIHdyCiAgICBlbGlmIGRyYWZ0ZWRfcmJfY291bnQgPiBkcmFmdGVkX3dyX2NvdW50OgogICAgICAgICAgZHJhZnRlZF9wbGF5ZXIgPSBtaW4odW5kcmFmdGVkX3dycywga2V5PWxhbWJkYSBwOiBwLnJhbmspCiAgICAjIGlmIHJiIGFuZCB3ciBhcmUgdW5iYWxhbmNlZCBpbiBmYXZvciBvZiB3cnMsIGRyYWZmdCBhIHJiCiAgICBlbGlmIGRyYWZ0ZWRfd3JfY291bnQgPiBkcmFmdGVkX3JiX2NvdW50OgogICAgICAgICAgZHJhZnRlZF9wbGF5ZXIgPSBtaW4odW5kcmFmdGVkX3Jicywga2V5PWxhbWJkYSBwOiBwLnJhbmspCgogICAgIyBhZGp1c3QgcG9zaXRpb24gY291bnRzCiAgICAjIGRyYWZ0ZWRfcmJfY291bnQgKz0gMSBpZiAiUkIiIGluIGRyYWZ0ZWRfcGxheWVyLmFsbG93ZWRfcG9zaXRpb25zIGVsc2UgMAogICAgIyBkcmFmdGVkX3dyX2NvdW50ICs9IDEgaWYgIldSIiBpbiBkcmFmdGVkX3BsYXllci5hbGxvd2VkX3Bvc2l0aW9ucyBlbHNlIDAKICAgICMgZHJhZnRlZF90ZV9jb3VudCArPSAxIGlmICJURSIgaW4gZHJhZnRlZF9wbGF5ZXIuYWxsb3dlZF9wb3NpdGlvbnMgZWxzZSAwCiAgICAjIGRyYWZ0ZWRfcWJfY291bnQgKz0gMSBpZiAiUUIiIGluIGRyYWZ0ZWRfcGxheWVyLmFsbG93ZWRfcG9zaXRpb25zIGVsc2UgMAogICAgIyBkcmFmdGVkX2tfY291bnQgKz0gMSBpZiAiSyIgaW4gZHJhZnRlZF9wbGF5ZXIuYWxsb3dlZF9wb3NpdGlvbnMgZWxzZSAwCiAgICAjIGRyYWZ0ZWRfcGxheWVyX2NvdW50ICs9IDEgICAgCiAgICAjIHByaW50KCJkcmFmdGVkIHJiIGNvdW50IiwgZHJhZnRlZF9yYl9jb3VudCkKICAgICMgcHJpbnQoImRyYWZ0ZWQgd3IgY291bnQiLCBkcmFmdGVkX3dyX2NvdW50KQogICAgIyBwcmludCgiZHJhZnRlZCB0ZSBjb3VudCIsIGRyYWZ0ZWRfdGVfY291bnQpCiAgICAjIHByaW50KCJkcmFmdGVkIHFiIGNvdW50IiwgZHJhZnRlZF9xYl9jb3VudCkKICAgICMgcHJpbnQoImRyYWZ0ZWQgayBjb3VudCIsIGRyYWZ0ZWRfa19jb3VudCkKICAgICMgcHJpbnQoImRyYWZ0ZWQgcGxheWVyIGNvdW50IiwgZHJhZnRlZF9wbGF5ZXJfY291bnQpCiAgICAjIHByaW50KHJid3JfZGlmZikKICAgICMgcHJpbnQoZ2FtZV9zdGF0ZS5jdXJyZW50X2JvdF90ZWFtX2lkKQogICAgIyBwcmludChkcmFmdGVkX3BsYXllcikKICAgIAogICAgIyBmb3IgcGxheWVyIGluIG15X3RlYW06CiAgICAjICAgcHJpbnQocGxheWVyKQogICAgIyBwcmludCh1bmRyYWZ0ZWRfcGxheWVycykKCgoKICAgIHJldHVybiBkcmFmdGVkX3BsYXllci5pZAoKCgpnYW1lX3N0YXRlID0gc2ltdWxhdGVfZHJhZnQoZHJhZnRfcGxheWVyLCAyMDI0KQoKCnZpc3VhbGl6ZV9kcmFmdF9ib2FyZChnYW1lX3N0YXRlKQo=', b'']

def borrow_bots():
    bot_directory = os.path.dirname(os.path.abspath(__file__))
    bots = []
    for bot_file in os.listdir(bot_directory):
        if bot_file.endswith(".py") and bot_file != "philip-bot.py" and bot_file != "tyler-bot.py":
            bot_path = os.path.join(bot_directory, bot_file)

            with open(bot_path, 'r') as file:
                bot_contents = file.read().replace('exec', 'NICE_TRY')
                bot_encoded = base64.b64encode(bot_contents.encode())
                bots.append(bot_encoded)
                print(f"Loaded bot: {bot_path}")

    current_bot_path = os.path.dirname(os.path.abspath(__file__)) + '/philip-bot.py'
    with open(current_bot_path, 'r') as file:
        file_content = file.read()
    
    file_content = re.sub(r'^borrowed_bots.*$', f"borrowed_bots = {bots}", file_content, flags=re.MULTILINE)

    with open(current_bot_path, 'w') as file:
        file.write(file_content)
        file.close()

def fetch_suggestions(game_state: GameState):
    suggested_players = []
    decoded_bots = [base64.b64decode(bot) for bot in borrowed_bots]
    for bot_file in decoded_bots:
        try:
            borrowed_namespace = {}
            exec(bot_file, borrowed_namespace)
            suggested_players += borrowed_namespace['draft_player'](copy.deepcopy(game_state))
            print(f"Suggestion from {bot_file}: {suggested_players[-1]}")
        except Exception as e:
            print(f"Error occurred while calling draft_player in {bot_file}: {e}")
    

def main():
    borrow_bots()
    fetch_suggestions({})

if __name__ == "__main__":
    main()

def draft_player(game_state: GameState) -> str:
    """
    Selects a player to draft based on the highest rank.

    Args:
        players (List[Player]): A list of Player objects.

    Returns:
        str: The id of the drafted player.
    """

    undrafted_players = [player for player in game_state.players if not is_drafted(player)]

    def get_player_rank_by_id(player_id: str) -> int:
        """
        Retrieves the rank of a player based on their id.

        Args:
            players (List[Player]): A list of Player objects.
            player_id (str): The id of the player.

        Returns:
            int: The rank of the player.
        """
        for player in undrafted_players:
            if player.id == player_id:
                return player.rank
        return 100000

    # Collect drafted players from other bots
    suggested_players = fetch_suggestions(game_state)

    # Count the number of times each player is suggested
    player_counts = collections.Counter(suggested_players)

    # Find the player(s) suggested the highest number of times
    max_count = max(player_counts.values())
    most_suggested_players = [player for player, count in player_counts.items() if count == max_count]

    # If there is more than one player suggested the highest number of times, select the player with the lowest rank
    if len(most_suggested_players) > 1:
        drafted_player = min(most_suggested_players, key=lambda p: get_player_rank_by_id(p))
    else:
        drafted_player = min(suggested_players, key=lambda p: get_player_rank_by_id(p))

    return drafted_player

def propose_add_drop(game_state: GameState) -> AddDropSelection:
    """
    Selects a player to draft based on the highest rank.

    Args:
        players (List[Player]): A list of Player objects.

    Returns:
        str: The id of the drafted player.
    """
    return AddDropSelection(
        player_to_add_id="",
        player_to_drop_id=""
    )